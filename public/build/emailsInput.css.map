{
  "version": 3,
  "file": "emailsInput.css",
  "sources": [
    "../../EmailsInput.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { writable, get } from \"svelte/store\";\n\n  const emailsStore = writable([]);\n\n  export function getEmails() {\n    return get(emailsStore);\n  }\n\n  export function replaceEmails(newEmails = []) {\n    const validatedEmails = newEmails.map(validateEmail);\n    emailsStore.set(validatedEmails);\n  }\n\n  export function onEmailsChange(cb) {\n    emailsStore.subscribe(cb);\n  }\n\n  let inputValue;\n\n  function handleInput(value) {\n    let trimmedValue;\n    if (value) {\n      trimmedValue = value.trim();\n    } else if (inputValue) {\n      trimmedValue = inputValue.trim();\n      inputValue = \"\";\n    } else {\n      return;\n    }\n\n    addEmail(trimmedValue);\n  }\n\n  function validateEmail(value) {\n    const valid = value.includes(\"@\");\n    const email = { value, valid };\n    return email;\n  }\n\n  function addEmail(email) {\n    if (!email) {\n      return;\n    }\n    const validatedEmail = validateEmail(email);\n    emailsStore.update(emails => [...emails, validatedEmail]);\n  }\n\n  function removeEmail(email) {\n    emailsStore.update(emails => emails.filter(e => e.value !== email));\n  }\n\n  function removeLastEmail() {\n    emailsStore.update(emails => {\n      const emailsCopy = [...emails];\n      emailsCopy.pop();\n      return emailsCopy;\n    });\n  }\n\n  function handleKeyDown(event) {\n    switch (event.key) {\n      case \"Tab\":\n      case \",\":\n        handleInput();\n        break;\n      case \"Enter\":\n        event.preventDefault();\n        handleInput();\n        break;\n      case \"Backspace\":\n        if (!inputValue.length) {\n          removeLastEmail();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  function getClipboardData(event) {\n    if (event.clipboardData) {\n      return event.clipboardData.getData(\"text/plain\");\n    }\n\n    return \"\";\n  }\n\n  function handlePaste(event) {\n    const data = getClipboardData(event);\n    data.split(\",\").map(handleInput);\n  }\n\n  function setFocusOnInput(event) {\n    event.target.lastElementChild.focus();\n  }\n\n  let initialPlaceholder = \"Enter email adresses...\";\n  let processPlaceholder = \"add more people...\";\n  $: placeholder =\n    $emailsStore.length > 0 ? processPlaceholder : initialPlaceholder;\n</script>\n\n<style>\n  .email-chip {\n    display: inline-block;\n    height: 24px;\n    margin-right: 8px;\n    margin-bottom: 4px;\n  }\n\n  .email-valid {\n    padding-left: 10px;\n    padding-right: 8px;\n    border-radius: 100px;\n    background-color: rgba(102, 153, 255, 0.2);\n  }\n  .email-invalid {\n    border-bottom: 1px dashed #d92929;\n  }\n\n  .delete-email-button {\n    margin-left: 2px;\n    width: 8px;\n    height: 8px;\n    cursor: pointer;\n  }\n  .input-wrapper {\n    max-height: 80px;\n    height: 80px;\n    overflow-y: auto;\n    background-color: #fff;\n    border: 1px solid #c3c2cf;\n    border-radius: 4px;\n    padding: 7px;\n    font-size: 14px;\n    line-height: 24px;\n  }\n  .emails-input {\n    display: inline-flex;\n    max-width: 100%;\n    flex-grow: 1;\n    font-family: \"Open Sans\", sans-serif;\n    font-size: 14px;\n    line-height: 24px;\n    border: none;\n  }\n  .emails-input:focus {\n    outline: none;\n  }\n</style>\n\n<div class=\"input-wrapper\" on:click|self={setFocusOnInput}>\n  {#if $emailsStore.length > 0}\n    {#each $emailsStore as email, i}\n      <span\n        class=\"email-chip\"\n        class:email-valid={email.valid}\n        class:email-invalid={!email.valid}>\n        {email.value}\n        <span\n          class=\"delete-email-button\"\n          role=\"button\"\n          on:click={() => removeEmail(email.value)}>\n          âœ•\n        </span>\n      </span>\n    {/each}\n  {/if}\n  <input\n    class=\"emails-input\"\n    type=\"email\"\n    {placeholder}\n    bind:value={inputValue}\n    on:keydown={handleKeyDown}\n    on:blur={() => handleInput()}\n    on:paste|preventDefault={handlePaste} />\n\n</div>\n"
  ],
  "names": [],
  "mappings": "AAwGE,WAAW,cAAC,CAAC,AACX,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,YAAY,cAAC,CAAC,AACZ,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,GAAG,CAClB,aAAa,CAAE,KAAK,CACpB,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC5C,CAAC,AACD,cAAc,cAAC,CAAC,AACd,aAAa,CAAE,GAAG,CAAC,MAAM,CAAC,OAAO,AACnC,CAAC,AAED,oBAAoB,cAAC,CAAC,AACpB,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,cAAc,cAAC,CAAC,AACd,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,aAAa,cAAC,CAAC,AACb,OAAO,CAAE,WAAW,CACpB,SAAS,CAAE,IAAI,CACf,SAAS,CAAE,CAAC,CACZ,WAAW,CAAE,WAAW,CAAC,CAAC,UAAU,CACpC,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,IAAI,AACd,CAAC,AACD,2BAAa,MAAM,AAAC,CAAC,AACnB,OAAO,CAAE,IAAI,AACf,CAAC"
}